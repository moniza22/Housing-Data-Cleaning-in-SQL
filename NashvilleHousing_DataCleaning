SELECT * FROM PortfolioProject..Nashville
Housing
-- 1
-- changing date format
SELECT SaleDate
FROM PortfolioProject..NashvilleHousing

-- Select saledate, convert, update table to set the existing column to a new type through convert command didnot work
SELECT SaleDate, CONVERT(datetime, SaleDate)
FROM PortfolioProject..NashvilleHousing
UPDATE NashvilleHousing
SET SaleDate=CONVERT(Datetime,SaleDate)
SELECT * FROM PortfolioProject..NashvilleHousing

-- Alter table, add new column, update table to set new column through convert command worked 
ALTER TABLE NashvilleHousing
ADD SaleDateConverted DATETIME
UPDATE NashvilleHousing
SET SaleDateConverted=CONVERT(datetime,SaleDate)

SELECT *
FROM NashvilleHousing

-- 2
-- Populate PropertyAddress data
SELECT *
FROM NashvilleHousing
ORDER BY ParcelID

-- Self Joining to populate the null values of PropertyAddress 
SELECT a.PropertyAddress, a.ParcelID, a.UniqueID, b.PropertyAddress, b.ParcelID, b.UniqueID, ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM PortfolioProject..NashvilleHousing a
JOIN PortfolioProject..NashvilleHousing b
ON a.ParcelID=b.ParcelID
AND a.UniqueID<>b.UniqueID
WHERE a.PropertyAddress IS NULL

UPDATE a
SET a.PropertyAddress=ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM PortfolioProject..NashvilleHousing a
JOIN PortfolioProject..NashvilleHousing b
ON a.ParcelID=b.ParcelID
AND a.UniqueID<>b.UniqueID
WHERE a.PropertyAddress IS NULL

SELECT *
FROM PortfolioProject..NashvilleHousing
-- WHERE PropertyAddress IS NULL

-- 3
-- Breaking out address into indivitual columns (Address, City, State)
SELECT PropertyAddress
FROM PortfolioProject..NashvilleHousing

SELECT PropertyAddress, SUBSTRING (PropertyAddress,1,CHARINDEX(',',PropertyAddress)-1) AS Address,
SUBSTRING (PropertyAddress, CHARINDEX(',',PropertyAddress)+1, LEN(PropertyAddress)) AS City
FROM PortfolioProject..NashvilleHousing

ALTER TABLE PortfolioProject..NashvilleHousing
ADD PropertySplitAddress NVARCHAR(255)
UPDATE PortfolioProject..NashvilleHousing
SET PropertySplitAddress=SUBSTRING (PropertyAddress,1,CHARINDEX(',',PropertyAddress)-1)


ALTER TABLE PortfolioProject..NashvilleHousing
ADD  PropertySplitCity NVARCHAR(255)
UPDATE PortfolioProject..NashvilleHousing
SET PropertySplitCity=SUBSTRING (PropertyAddress, CHARINDEX(',',PropertyAddress)+1, LEN(PropertyAddress))

-- 4
-- Breaking owner address into indivitual columns (Address, City, State)
SELECT OwnerAddress
FROM PortfolioProject..NashvilleHousing

SELECT 
PARSENAME(REPLACE(OwnerAddress,',','.'),3) AS OwnerStreetAddress,
PARSENAME(REPLACE(OwnerAddress,',','.'),2) AS OwnerCity,
PARSENAME(REPLACE(OwnerAddress,',','.'),1) As OwnerState
FROM PortfolioProject..NashvilleHousing

ALTER TABLE PortfolioProject..NashvilleHousing
ADD OwnerStreetAddress NVARCHAR(255)
UPDATE PortfolioProject..NashvilleHousing
SET OwnerStreetAddress=PARSENAME(REPLACE(OwnerAddress,',','.'),3)

ALTER TABLE PortfolioProject..NashvilleHousing
ADD OwnerCity NVARCHAR(255)
UPDATE PortfolioProject..NashvilleHousing
SET OwnerCity=PARSENAME(REPLACE(OwnerAddress,',','.'),2)

ALTER TABLE PortfolioProject..NashvilleHousing
ADD OwnerState NVARCHAR(255)
UPDATE PortfolioProject..NashvilleHousing
SET OwnerState=PARSENAME(REPLACE(OwnerAddress,',','.'),1) 

-- 5
-- Change Y to Yes and N to No in SoldAsVacant field

Select SoldAsVacant
FROM PortfolioProject..NashvilleHousing

SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM PortfolioProject..NashvilleHousing
GROUP BY SoldAsVacant

SELECT SoldAsVacant, 
CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
     WHEN SoldAsVacant = 'N' THEN 'No'
ELSE SoldAsVacant
END
FROM PortfolioProject..NashvilleHousing

UPDATE PortfolioProject..NashvilleHousing
SET SoldAsVacant= CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
     WHEN SoldAsVacant = 'N' THEN 'No'
ELSE SoldAsVacant
END

-- 6
-- Delete duplicate rows through ROW_NUMBER() function
-- 6.1 first write the windows function of ROW_NUMBER()
SELECT *, ROW_NUMBER() OVER (PARTITION BY ParcelID,PropertyAddress,SaleDate,SalePrice,LegalReference ORDER BY UniqueID) AS row_num
FROM PortfolioProject..NashvilleHousing
-- 6.2 create CTE to work with ROW_NUMBER
WITH row_num_cte 
AS (SELECT *, ROW_NUMBER() OVER (PARTITION BY ParcelID,PropertyAddress,SaleDate,SalePrice,LegalReference ORDER BY UniqueID) AS row_num
FROM PortfolioProject..NashvilleHousing 
)
SELECT *
FROM row_num_cte
WHERE row_num >1
-- 6.3 delete duplicates
WITH row_num_cte 
AS (SELECT *, ROW_NUMBER() OVER (PARTITION BY ParcelID,PropertyAddress,SaleDate,SalePrice,LegalReference ORDER BY UniqueID) AS row_num
FROM PortfolioProject..NashvilleHousing 
)
DELETE
FROM row_num_cte
WHERE row_num >1
-- 6.4 check if duplicates are removed
WITH row_num_cte 
AS (SELECT *, ROW_NUMBER() OVER (PARTITION BY ParcelID,PropertyAddress,SaleDate,SalePrice,LegalReference ORDER BY UniqueID) AS row_num
FROM PortfolioProject..NashvilleHousing 
)
SELECT *
FROM row_num_cte
WHERE row_num >1

-- 7
-- Deleting columns

ALTER TABLE PortfolioProject..NashvilleHousing
DROP COLUMN PropertyAddress, OwnerAddress

SELECT *
FROM PortfolioProject..NashvilleHousing 

ALTER TABLE PortfolioProject..NashvilleHousing
DROP COLUMN TaxDistrict
